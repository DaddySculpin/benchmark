{"version":3,"sources":["webpack:///./src/docs/guidelines/markup.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4OAMaA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,yCACA,oLACA,0EACA,sBACE,kBAAIC,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,kBACA,kBAAIA,WAAW,MAAf,oCAEF,wNACA,uBACA,mCACA,oFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2HAQL,uBACA,+BACA,uDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uMASL,uBACA,yCACA,uFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+IAQL,uBACA,oCACA,gFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mMAUL,uBACA,2CACA,mHACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wVAYL,uBACA,4CACA,4GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yPAcL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2GAQL,uBACA,oCACA,sBACE,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,2DADQ,eAGpB,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,oFADQ,6CAQ1BJ,EAAWK,gBAAiB","file":"component---src-docs-guidelines-markup-mdx-28d406c7e52c3e8a6593.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/benchmark/benchmark/packages/docs/src/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Domain Language`}</h2>\n    <p>{`A design systems allows us to define our own Domain Specific Language (DSL). This is the common language used by developers, designers and content authors.`}</p>\n    <p>{`When a \"primary button\" is used all parties know:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`What it looks like`}</li>\n      <li parentName=\"ul\">{`It's intent`}</li>\n      <li parentName=\"ul\">{`How it behaves`}</li>\n      <li parentName=\"ul\">{`It's accessibility implications`}</li>\n    </ul>\n    <p>{`The following guidelines are to keep the benchmark DSL universally accessible. The primary goal is to provide a language with as little friction as possible in conversation, code and tooling.`}</p>\n    <hr></hr>\n    <h3>{`Universal`}</h3>\n    <p>{`Markup should be readable by someone that is non-technical.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// BAD: What does this mean for a non-technical person?\n<TD><TD/>\n\n// GOOD: Clear intent\n<TableCell><TableCell/>\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Clear`}</h3>\n    <p>{`Markup should avoid ambiguity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// BAD: The \"2\" value is ambiguous.\n// It could imply a pixel/percent value.\n<Stack spacing=\"2\"><Stack/>\n\n// GOOD: The spacing scale is clear of conflicts.\n<Stack spacing=\"small\"><Stack/>\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Self Describing`}</h3>\n    <p>{`Markup should be readable by someone who is new to the system.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// BAD: Without any context it is not clear what this does.\n<MCMS><MCMS/>\n\n// GOOD: Clearly states\n<MultipleSelect><MultipleSelect/>\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Consistent`}</h3>\n    <p>{`Markup should be consistent. Pick one word per concept.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// BAD: Two props with the same effect but named differently.\n<Switch disabled />\n<TextInput isDisabled />\n\n// GOOD: Consistent naming.\n<Switch isDisabled />\n<TextInput isDisabled />\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Sensible Defaults`}</h3>\n    <p>{`The most common use case for a component should be usable without having to specify props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// BAD: The first button is a \"bare\" button with no styling applied.\n// The \"bare\" button is a rare use case and the most common use\n// case should be shown instead.\n<Button />\n\n// GOOD: The primary button is the default.\n// Bare buttons can still be accessed by specifying it in the variant.\n<Button />\n<Button variant=\"bare\" />\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Property Inference`}</h3>\n    <p>{`Props should having naming conventions to help infer what type of data they accept.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Boolean props should be prefixed with either is, can or has.\n\n// GOOD:\n// \"is\" for visual variations\n<Modal isActive />\n\n// \"can\" for behvior variations\n<Modal canExpand />\n\n// \"has\" to toggle UI elements\n<Modal hasCloseButton />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Events should be prefixed with \"on\".\n\n// GOOD:\n// \"on\" for events\n<MultipleSelect onSelect />\n`}</code></pre>\n    <hr></hr>\n    <h3>{`References`}</h3>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.goodreads.com/book/show/3735293-clean-code\"\n        }}>{`Clean Code`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dlinau.wordpress.com/2016/02/22/how-to-name-props-for-react-components/\"\n        }}>{`How to name props for React components`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}